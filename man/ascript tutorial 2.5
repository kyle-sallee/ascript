.TH "ascript tutorial 2" 5

.SH NAME
.EX
ascript tutorial 2

.SH COPYRIGHT
.EX
By Kyle Sallee in 2019 copyrighted.

.SH LINE ORIENTED
.EX
Ascript was a line oriented script interpreter.

.SH PART ORIENTED
.EX
Ascript is a part oriented script interpreter.

.SH ARGOT SEPARATION
.EX
With line feed and by comma the argot can be separated.

.SH LINE CONTINUATION
.EX
By \\ a line feed when prefixed on the next line
the argot parameters continues.

.SH PART START
.EX
At part start or line start an argot is expected.

.SH COMMENT
.EX
An argot when expected a # when discovered
until line feed a comment exists.
By the ascript parser the comment is ignored.

.SH ARGOT
.EX
Argot are word groups.  Like the German language
a new word to make existing words are concatenated.

.SH IN ARGOT NAME THE SPACE IS COSMETIC
.EX
dubfile
dub file
By the above two lines the same argot is referenced.

.SH ARGOT NAMES NOT CONTAINED BYTES
.EX
In an argot name tab, line feed, and comma are not contained.

.SH ARGOT PARAMETERS
.EX
By tab the argot parameters and the argot name       are separated.
By tab the argot parameters and the argot parameters are separated.

.SH ARGOT GOSSIP
.EX
Rather     than      direct parameters by argot
the target contained address
the origin contained address
are often  used.

.SH FAIL OUTCOME
.EX
By some argot a fail outcome is possible.

.SH SUCCESS OUTCOME
.EX
A fail     outcome when possible
a success  outcome when attained
the follow argot   is   not interpreted.

.SH SKIPPY ARGOT
.EX
The fail  outcome to handle for the skipped argot
the argot go
the argot pin
the argot ret are commonly placed.

.SH WHY SKIP?
.EX
Argot to argot locomotion like  running is     efficient.
An       error when possible   skipping is     efficient.
Argot go argot pin  when       invoked  is not efficient.

.SH THE ARGOT go
.EX
To the direct parameter provided label a one way trip becomes.

.SH THE ARGOT pin
.EX
To the direct parameter provided label a round   trip becomes.

.SH THE ARGOT pin WITH THE OPCODE ret
.EX
The opcode ret when executed
by  argot  pin the  CPU is regained
at  the    pin aft  argot
the interpretation  continues.

.SH FLOW CONTROL
.EX
The flow is not controlled!
The scripts' liberty must be sustained.

.SH THE SKIPPED ARGOT
.EX
At   the   skipped argot the branch selection becomes possible.
The  argot go
the  argot pin
when invoked a     labeled   branch is interpreted.

.SH THE ARGOT next
.EX
The argot next when invoked the fail outcome can be ignored.

.SH THE ARGOT skip
.EX
The argot skip when invoked the following argot is not interpreted.

.SH OPTION PLETHORA
.EX
Rather than suggested above for the skipped argot
many more argot can be invoked.

.SH FLOW CONTROL DOES NOT EXIST
.EX
"If then else fi" does not exist.

.SH HOW TO WRITE ASCRIPT SCRIPTS?
.EX
Discover each argot's task.
Read     the  manual  pages.
Execute  a    text    editor.
Start    typing.

.SH NEAR LABELS
.EX
By single quotes '' near labels are enclosed.

.SH FAR LABELS
.EX
By double quotes "" far labels are enclosed.

.SH TEXT
.EX
By back ticks `` text is enclosed.

.SH VAR NAMES
.EX
Var names are not enclosed.

.SH VALUES
.EX
For values a space and a base suffix is appended.
b for binary; d for decimal; o for octal; x for hexadecimal
are commonly used prefixed.

.SH ARGOT COOPERATION EXAMPLE
.EX
.ta T 8n
.in -8
\fB
a,io,int
name		x,	int 4,	scope,	set	4 d
name		y,	int 4,	scope,	set	5 d
name		z,	int 4,	scope

origin		x,=
origin		y,+
out now		`z=`	z	`\\n`
\fR
.in

.SH ARGOT COOPERATION EXAMPLE EXPLANATION
.EX
The example is advanced usage.  Confusion is anticipated.
3 var are made. The var z when made in target the address remains.
Now does it make sense?

.SH THE ARGOT scope
.EX
The argot  scope when invoked  the target address  is saved
an  opcode call  is   executed and the interpretation continues.
The opcode ret   when executed by  argot  scope
the CPU    is         regained and the    var      is unmade.

.SH THE ARGOT = THE ARGOT +
.EX
From the target address  the target operand is acquired.
From the origin address  the origin operand is acquired.
The Algebra     language and the    ascript    language differ.

.SH ARGOT HOSTING
.EX
The argot io  when loaded the argot out now becomes available.
The argot int when loaded the argot int 4   becomes available.
The argot a   when loaded the argot name
the argot origin, the argot scope, and set  become  available.

.SH LEARNING
.EX
Ascript begins  stupid and  fast.
The     hosting argot  when loaded
ascript becomes smart  and  fast.

.SH WHY LEARN?
.EX
Can  humans  learn   instantly?  Computers also can not.
An   ascript process as a total  moron if not born
the  lore    for     loading     and registration
a    considerable    duration    becomes.

.SH WHAT IS TARGET?
.EX
The target address and an English subject are vaguely similar.

.SH WHAT IS ORIGIN?
.EX
The origin address and an English object are vaguely similar.

.SH STILL CONFUSED?
.EX
The argot name  when invoked the target is set.
The argot int 4 when invoked the target address is used and changed.
the argot scope
the argot set   when invoked the target address is used.

.SH OBTUSE
.EX
Ascript     is  not obtuse.
In   the    nihongo language
the  topic  when    established        is  tacitly sustained.
The  target address the origin address are tacitly sustained.

.SH SUSTAINED PERFORMANCE
.EX
Every   time var x var y and var z were not typed
opcodes did  not execute.
Opcodes when not executed a duration did not become.
Nothing executes faster than nothing!

.SH OPTIMIZED GRAMMAR
.EX
A   human language  similar computer  language while desired
all human languages are     ambiguous inane    slow.
The best  from      each    when      emulated
a   fast  language  becomes.

.SH THE POTPOURRI
.EX
From 8086 asm, C, English, German, Fortran, Japanese,
reverse Polish notation,   and     other    languages
some    ideas  and         words   were     borrowed.
For polyglots; ascript     will    be       fun.

.SH SPLIT ARGOT
.EX
Like argot scope
like argot pin
by   many  argot the CPU is relinquished then regained.
In   two   or more separate parts the task is completed.

.SH WHY SPLIT ARGOT?
.EX
The  better question is  why    not?
From prior  planning and proper procreating
the  performance     is  preserved.

.SH THE ARGOT CALL
.EX
The argot call when invoked the opcode call is executed.

.SH THE ARGOT RET
.EX
The argot ret  when invoked the opcode ret  is executed.

.SH OTHER ARGOT
.EX
By many argot the opcode call and the opcode ret can be executed.
However, sometimes those purposes alone are useful.

.SH THE RET CASCADE
.EX
Many split   argot when        invoked   on  the stack
the  planned procrastinated        tasks are piled.
The  opcode  ret when executed the tasks     complete.

.SH THE ARGOT pin
.EX
The argot pin when   invoked a   round trip becomes.
The argot ret when   invoked the round trip ends.
During the trip some     var if  made  the argot scope if invoked
at     the trip end  the var are unmade.

.SH COOPERATION
.EX
The    above sections
when         comprehended how argot cooperate also
should be    comprehended.

.SH FUN
.EX
Amused yet? Computer languages are moronically explicit.
The outcome when     already   attained
the same    task     is        repeated
opcodes     execute  and       duration becomes.

.SH UNCONTROLLED FLOW EXAMPLE
.EX
.in -8
\fB
a
int
io

name	A
int 4
set	1 d
origin	1 d
==
go	'not 1'
out	`A's value is 1.\\n`
ret

'not 1'
out	`A's value is not 1.\\n`
ret
\fR
.in

.SH WHAT IS TARGET?
.EX
In target A's address is stored.

.SH WHAT IS ORIGIN?
.EX
In origin the address for the value 1 is stored.

.SH IN THE EXAMPLE WHAT HAPPENS?
.EX
The argot go
is not interpreted.

.SH AMBIGUITY?
.EX
The argot  operator == when executed
the target and   the   origin          are compared.
A   type   int 4 comparison            is  selected.
The values since equal  the next argot is  skipped.

.SH THE ARGOT ret WHY INVOKE?
.EX
In    the    example the argot ret       when executed
the   stack  stored  instruction pointer is   restored.
Other tasks  since   not procrastinated
the   script interpretation ends.

.SH AUTHOR
.EX
In 2016; by Kyle Sallee; ascript              was created.
In 2019; by Kyle Sallee; ascript tutorial 2.5 was created.

.SH LICENSE
.EX
By \fBman 7 ascript\fR the license is provided.

.SH SEE ALSO
.EX
\fB
man 1 ascript
man 5 ascript
man 5 ascript tutorial 3
man 7 ascript
\fR
