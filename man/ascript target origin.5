.TH "ascript target origin" 5

.SH NAME
.EX
ascript target origin

.SH COPYRIGHT
.EX
By Kyle Sallee in 2020 copyrighted.

.SH OPCODE
.EX
For a   typical opcode  two operands exist.
By  the origin  operand
the     target  operand is  modified.

.SH ASCRIPT
.EX
A  target address
a  origin address exist.

.SH WHAT DIFFERS?
.EX
An  opcode is  a single  unit.
The operation, operands, values, offsets, addresses, etc...
are combined.

.SH IN ASCRIPT
.EX
The operation and operands are not a single expression.
But as        an  inseparable  unit  should be pretended.

.SH ARGOT TARGET ORIGIN
.EX
The  var address are acquired and stored.  Simple?  Wrong!
From var name    to  address  for translation many opcodes execute.

.SH WHY DELEGATE?
.EX
To  argot target origin  the task when delegated
by  argot that   use     those addresses
the translation  opcodes are not contained are not executed.

.SH REUSE
.EX
The     target address
the     origin address
when    reused a var name to address translation was skipped.
Nothing executes faster      than    nothing.

.SH DIRECT PARAMETERS
.EX
Limitless direct parameters can be received.  But why?
The       direct parameters for    processing
opcodes   must   execute.

.SH WHAT IS DEREFERENCE?
.EX
Var  A's value is B.
Var  B's value is C.
Var  C's value is what?
From A   or    B  by dereference C's value can be acquired.

.SH INTER ARGOT COMMUNICATION
.EX
By argot name  the target address is set.
By argot int 4 the target address is used and modified.
By argot scope the target address is copied.

.SH VAR DEREFERENCE
.EX
By  argot  exist
by  argot  resolve
the target address is used and modified.

.SH WHY NOT DIRECT PARAMETER DEREFERENCE?
.EX
A     direct parameter         if deferenced
where can    the       address be stored?

.SH FOR DEREFERENCE WITH * WHY NOT PREFIX VAR?
.EX
Every   var     name when processed
the     leading byte for  value 2a x must be checked.
Parsing is  not cost free!
Many    opcodes must execute.

.SH PLENTIFUL SOLUTIONS
.EX
By   the target          address
by   the origin          address
many     problems    are precluded.
Much     performance is  preserved.

.SH JUST TWO ADDRESSES?
.EX
By  CPUs        opcodes
by  ascript     argot
a   complicated language, such as Algebra, is not emulate.

.SH FORTRAN OR C WHY NOT COPY?
.EX
By  C
a   complicated language, such as Algebra, is     emulated.
For source code compilation
seconds,        minutes,  hours            can    elapse.

.SH EARLIER ASCRIPT
.EX
In    earlier    ascript
near  limitless  addresses    were stored.
While impressive more opcodes were executed.

.SH KISS
.EX
Keep IT simple speedy.
Fast is better than awesome.

.SH MORE THAN 2 ADDRESS SLOTS REQUIRED?
.EX
The argot    keep cite when invoked
for address storage   16 d more    become available.

.SH MORE THAN 16 ADDRESS SLOTS REQUIRED?
.EX
A type ray var can be created and loaded!

.SH L1 L2 L3 SIMILAR
.EX
The   CPU    cache  layers are similar.
Argot target origin and L1 are similar.
Argot keep cite     and L2 are similar.
Type  ray    var    and L3 are similar.

.SH TRI-LINKED VAR
.EX
Rather than type ray   into    tri-linked lists var can be added.
From   stem to   stern or      conversely
the    list can  be    easily  walked.

.SH AUTHOR
.EX
In 2016; by Kyle Sallee; ascript               was created.
In 2019; by Kyle Sallee; ascript target origin was created.

.SH LICENSE
.EX
By \fBman 7 ascript\fR the license is provided.

.SH SEE ALSO
.EX
\fB
man 1 ascript
man 5 ascript
man 5 ascript argot
man 5 ascript operator
man 5 ascript tutorial 1
man 5 ascript value
man 5 ascript var
man 7 ascript
\fR
