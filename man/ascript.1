.TH ascript 1

.SH NAME
 ascript

.SH COPYRIGHT
.nf
By Kyle Sallee in 2016 copyrighted.

.SH WHAT IS A COMPUTER?
.EX
A computer is an arithmetic machine.

.SH WHAT IS A CPU?
.EX
The CPU is a computer's central processing unit.

.SH WHAT ARE OPCODE?
.EX
The opcode are the CPU instructions codes.

.SH WHAT DO CPU DO?
.EX
The CPU executes opcodes.

.SH WHAT IS A PROGRAM?
.EX
A program is an opcode sequence not yet loaded into memory.

.SH WHAT IS A PROCESS?
.EX
A process is  a  loaded and executing program.
A process can be blocked, paused, running, sleeping, or suspended.

.SH WHAT IS A LIBRARY?
.EX
In a library useful knowledge for shared access is stored.

.SH WHAT ARE ELF SO?
.EX
By ELF SO, executable link format shared object files,
opcode sequences are encapsulated.

.SH WHY USE ELF SO?
.EX
BY ELFSO opcode sequence libraries are often provided.
An ELFSO can be loaded once and the opcode sequences executed often.

.SH WHAT IS TEXT?
.EX
Text are human readable meaningful symbol sequences.
The  currently being    read       manual page is text.

.SH WHAT IS SOURCE CODE?
.EX
Source code is   human readable text  that
indirectly  references CPU executable opcode sequences.

.SH WHAT IS COMPILATION?
.EX
From human   readable   text
to   machine executable opcode sequences
the  source  code       is     translated and stored.

.SH WHAT IS INTERPRETATION?
.EX
From human      readable   text
the  machine    executable opcode sequences
are  discovered and        executed.

.SH PARTIAL SUMMARY
.EX
CPU, opcode, ELF SO, library, program, process, text,
source code, compilation, and interpretation should be comprehended.

.SH WHAT IS A SCRIPT?
.EX
A script is a configuration file.

.SH WHAT IS A CONFIGURATION FILE
.EX
By a configuration file a process execution is customized.

.SH WHAT IS A COMPUTER LANGUAGE
.EX
Computer languages are text.
Opcodes  are numeric.
The text is  compiled or interpreted.
The intended opcode sequences are selected.

.SH WHAT IS FORTRAN
.EX
Formula Translator, also called Fortran, is a computer language.

.SH WHAT IS C?
.EX
The C computer language and Fortran are similar.

.SH WHAT IS MAGIC?
.EX
In a file by the first few bytes the content might be identified.

.SH WHY MAGIC?
.EX
The magic #! when discovered the script interpreter pathname follows.

.SH WHEN IS MAGIC USEFUL?
.EX
The script file        when       executed
the script is          not        executed.
The script interpreter program is executed.

.SH SCRIPT INTERPRETER PARAMETERS
.EX
A       script  interpreter    program when executed
for the first   parameter  the program pathname is typically provided.
For the second  parameter  the script  pathname is           provided.
Other   process parameters can follow.

.SH PARTIAL SUMMARY
.EX
A   computer   language, a script file, magic should be comprehended.
The difference between   compilation    and   interpretation
should be comprehended.

.SH WHAT IS ASCRIPT?
.EX
By ascript a faster than C language script interpreter program
is provided.

.SH WHY ASCRIPT?
.EX
The ascript performance is  absurdly fast.
The ascript grammar     is  absurdly easy.
For boot,   shutdown,   and software installation
ascript     scripts     are ideal.

.SH WHAT IS AN ARGOT?
.EX
A language's words and phrases are called argot.

.SH WHAT IS AN ASCRIPT ARGOT?
.EX
An  ascript argot     is an opcode sequence.
The word    argot     since rarely used
the ascript prepended is    assumed.

.SH ARGOT NAME AND SPACE
.EX
In  argot names the space  is cosmetic.
The argot name  target origin
the argot name  targetorigin
are tantamount.

.SH ARGOT NAME LENGTH
.EX
1 to 16 bytes is possible.

.SH WHERE DO ARGOT EXIST?
.EX
By ELFSO the argot are encapsulated.

.SH ARGOT AND LIBRARIES DIFFER
.EX
Library  opcode sequences by opcode ret are    terminated.
An argot opcode sequence  by opcode ret seldom terminates.

.SH LIBRARY USE AND ARGOT USE DIFFER
.EX
By most processes an ELFSO library can be loaded and executed.
By ascript only   an argot file    can be loaded and executed.

.SH WHAT IS A MANUAL PAGE?
.EX
A  manual  page is   a formatted documentation.
By program man  manual pages can be displayed.

.SH WHERE ARE ARGOT REFERENCED?
.EX
In  manual  pages
the argot   names        and
the argot   descriptions exist.

.SH WHERE ARE ARGOT USED?
.EX
In  ascript scripts
the argot   names        exists.

.SH IN SCRIPTS WHERE DO ARGOT NAMES BEGIN?
.EX
Aft line  feed and
aft comma
an  argot name possibly exists.

.SH ARGOT NAME EXCEPTION 0
.EX
By the symbol \\ when prefixed aft line feed
the current argot parameter list continues.

.SH ARGOT NAME EXCEPTION 1
.EX
At    line   start and  aft comma
the   symbol #     when encountered
until line   end   a    comment exists.

.SH ARGOT NAME EXCEPTION 2
.EX
By ``
by ''
by "" when  encapsulated
an    arogt name does not exist.

.SH WHAT FOLLOWS AN ARGOT
.EX
By  tab
the argot name and
the argot parameters
are separated.

.SH WHAT TERMINATES AN ARGOT?
.EX
By  line feed
by  comma
the argot name and
the argot parameter list is terminated.

.SH WHAT IS A COMMENT?
.EX
By a comment to the reader elaboration is provided.

.SH WHERE DO COMMENTS BEGIN?
.EX
An argot when expected the # when discovered a comment exists.

.SH WHERE DO COMMENTS END?
.EX
By the line feed a comment ends.

.SH WHAT IS PARSING?
.EX
By   ascript a script file              is parsed.
Into RAM     a human  readable   script is read.
Into         a faster format the script is translated.

.SH WHAT CAN PROGRAM ASCRIPT DO?
.EX
Scripts        are  parsed.
An  argot name when encountered
the argot      when not loaded is loaded.

.SH WHAT IS A SHELL?
.EX
Rather than   from   a file
from   the    keyboard
a      script when   entered and interpreted
a      shell  exists.

.SH IS ASCRIPT A SHELL?
.EX
The interpretation  afore start
the entire  script  must  be     parsed.
As  a shell ascript       is not suited.

.SH ASCRIPT STYLE SAMPLE
.EX
.ta T 8n
.in -8
\fB
#!/bin/ascript
a,	int,	io

name		A,	int 4,	scope,	set	4 d
name		B,	int 4,	scope,	set	5 d
name		C,	int 4,	scope

origin		A,=
origin		B,+
out		`C=`		C	`\\n`

target origin	C	9 d,==,	go	'not equal'
		out	`For the C value    9 exists\\n`,		ret
\&'not equal',	out	`Because C value is 9 this is not reached\\n`,	ret
\fR
.in

.SH EXAMPLE EXPLAINED
.EX
Looks  weird?  Looks spacy?  Looks cramped?
Almost any     look  is possible.

.SH NUMERIC SUFFIX
.EX
A   space and d why     append?
The space and d when    appended
the denary      base is indicated.

.SH DENARY?
.EX
Denary is base 10.

.SH DIGIT SEQUENCES AS VAR NAMES IS POSSIBLE
.EX
Afore the final byte in var names a space would not exist.

.SH OTHER NUMERIC SUFFIX
.EX
The space and b when appended a  binary value is indicated.
The space and o when appended an octal  value is indicated.
The space and x when appended a  denhex value is indicated.

.SH DENHEX?
.EX
Denhex also called dex or hexadecimal is base 16.

.SH NAME TRANSOFMRATION
.EX
The following transformation please consider:
hex aft decimal; hexadecimal; denhex; dex.

.SH WHY DIFFER?
.EX
For base 16
the word denhex and
the word dex    are more concise.

.SH THE ARGOT int 4 AND OTHER NUMERIC TYPES
.EX
The argot int 4 when invoked a 4 byte value type int var is created.
The argot int 8 when invoked a 8 byte value type int var is created.
The argot fix 8 when invoked a 8 byte value type fix var is created.

.SH THE ARGOT fix 8
.EX
By the most  significant 6 bytes the whole    is represented.
By the least significant 2 bytes the fraction is represented.
The    value 1 into 65536  parts              is separated.

.SH FIXED LIMITS
.EX
For  the whole value
from -140737488355327
to   +140737488355328
can  be  contained.

.SH FIXED LIMIT SUFFICIENCY
.EX
By  a type  fix the 2020 US federal deficit can be contained.
For engineering precision 1 into      100 parts    suffices.
By     type fix           1 into    65536 parts is provided.

.SH NO FLOATS
.EX
Floating point support if provided the ascript performance would sink.

.SH TAB
.EX
By tab the argot parameters are separated.

.SH LINE FEED
.EX
By line feed the argot are separated.

.SH COMMA
.EX
By comma the argot are separated.

.SH ONE OUTCOME ONLY
.EX
An  argot                   when  invoked
a   successful outcome only when  possible
the following  argot   is   often interpreted.

.SH NEXT ARGOT SKIP POSSIBILITY
.EX
An  argot           when invoked
a   failure outcome when possible
a   success outcome when attained
the following argot can  be skipped.

.SH VAR METADATA SUCCESS
.EX
A   fail  outcome when     possible
an  argot skip    when not provided
in  the   var     metadata in the success byte
the errno value            is     stored.

.SH ERRNO?
.EX
The errno value is a C language atavism that hints error causes.

.SH ARGOT go
.EX
The argot  go when  invoked a label is reached.
The following argot would     not   be interpreted.

.SH ARGOT pin
.EX
The argot pin when  invoked a label is visited.
The visit     when  complete
the following argot would           be interpreted.

.SH SINGLE QUOTE ENCLOSURE
.EX
By single quotes when enclosed a near label exists.

.SH DOUBLE QUOTE ENCLOSURE
.EX
By double quotes when enclosed a far  label exists.

.SH BACK TICK ENCLOSURE
.EX
By back ticks when enclosed    text content exists.

.SH AN ARGOT PARAMETER WHEN NOT ENCLOSED
.EX
An argot   parameter when not enclosed
a  numeric suffix    if   not present
a  var     name      is       assumed.

.SH SPACE
.EX
In argot   names  the space is removed.
In var     names  the space is sustained.
To numeric values the space and base are appended.

.SH VAR NAME LENGTH
.EX
1 to 32 bytes are possible.

.SH NEAR LABEL LENGTH
1 to 16 bytes are possible.

.SH FAR LABEL LENGTH
1 to 16 bytes are possible.

.SH BACK TICK ENCLOSED TEXT
.EX
A limit is not imposed.

.SH ARGOT NAME TO ARGOT ADDRESS TRANSLATION
.EX
From  argot name
to    argot address for  translation
about 20    opcodes must execute.

.SH TRANSLATION FREQUENCY
.EX
The argot address when stored
on  next  invocation
the translation opcode sequence does not execute.

.SH ARGOT NAMES
.EX
Mostly English word combinations are used.

.SH WHY ENGLISH
.EX
In    English many  byte  terse words exist.
For   English use   ASCII was   created.
UTF-8 is            ASCII 7-bit backward compatible.
Less  RAM           is    required.
Less  opcodes       must  execute.

.SH THE ARGOT DUB
.EX
When dubbed a nickname is   bestowed.
For  a file   system        node
the  access            when approved when dubbed
a    numeric  value    is   provided.

.SH THE C LANGUAGE VERNACULAR
.EX
In   the  C     language    rather than   the word dub
the  word file  descriptor  is commonly used.
However,  file  descriptors is inaccurate.
More than files can         be referenced.

.SH OPERATOR OVERLOAD
.EX
An  operator argot           when invoked
the operand  type            is   considered and
the proper   opcode sequence is   executed.

.SH OPERATOR OVERLOAD EXAMPLE
.EX
With type  byte   var
with type  int 4  var
the  argot add              when invoked
different  opcode sequences is   executed.

.SH OLD VS NEW
.EX
By  ascript language argot    names and
the C       language function names
are not     copied!

.SH ARGOT AUTHORSHIP REQUIRED LORE
.EX
The asm language lore
the C   language lore is required.

.SH PROGRAM OVERHEAD
.EX
A progeny     process  is created.
A program              is executed.
A significant duration    becomes.

.SH ARGOT OVERHEAD
.EX
If   not     loaded the argot once    loads.
When already loaded the argot opcodes execute.

.SH WHY ARGOT?
.EX
For program execution  a significant measurable duration becomes.
For argot   invocation a tiny   once only  load duration becomes.

.SH NOT MERELY PROGRAM GLUE
.EX
Most interpreter     and shell programs
as   program glue    are intended.
As   argot   glue
the  ascript program is  intended.

.SH SUPPORTED
.EX
For boot, network configuration, software suspend, shutdown
the argot         exist.
For audio and     graphics
the argot do  not exist.

.SH SEPARATION CAVEAT
.EX
The space, UTF-8 value 20 x, and
the tab,   UTF-8 value  9 x, are
NOT interchangeable!

.SH LOOPS
.EX
A   script during interpretation
the argot  self   optimize.
Any argot  group  when repeated when looped
improved   performance becomes.

.SH ZYGOTE
.EX
Among scripts some  argot  sequences are shared.
In    zygote  files the    shared        sequences exist.
A     zygote  and a script library   are similar.

.SH WHY ZYGOTE?
.EX
As     required zygote          can be loaded.
During load     argot sequences can be invoked.
By     far      labels
aft    load     argot sequences can be reached.

.SH TARGET FIRST
.EX
Argot parameters operands when provided
the   target  is first    and
the   sources    follow.

.SH ARGOT SEGFAULTS
.EX
The argot      segfault when     loaded
the            segfault manifest location and
a   reasonable cause    supposition
is  often      provided.

.SH ARGOT TRACE
.EX
The argot  trace  when invoked
for a huge performance loss
the script interpretation
can be     traced.

.SH NEXT TIME
.EX
\fBman 5 ascript\fR
In the BASH shell the above line execute.
By file ascript.5 the official argot index is provided.

.SH FILE ascript.5 tables
.EX
In ascript.5 the tables and terse argot descriptions are provided.

.SH ARGOT NAMES TO MANUAL PAGE SUPPOSITION
.EX
The  probable argot name when identified
from the      argot name or
from the host argot name
the  manual   page  name can  be surmised.

.SH ASCRIPT MANUAL PAGE NAMING
.EX
With ascript and space most ascript manual page names begin.

.SH AUTHOR
In 2015; by Kyle Sallee; ascript was created.

.SH LICENSE
By \fBman 7 ascript\fR the license is provided.

.SH SEE ALSO
.EX
\fB
man 1 ascript
man 5 ascript
man 5 ascript tutorial 1
man 7 ascript
\fR
