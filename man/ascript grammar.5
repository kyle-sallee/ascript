.TH "ascript grammar" 5

.SH NAME
.EX
ascript grammar

.SH COPYRIGHT
.EX
By Kyle Sallee in 2016 copyrighted.

.SH WELCOME BACK TO GRAMMAR SCHOOL!
.EX
c=a+b
The Algebra language grammar is     demonstrated.
The Algebra language         is not emulated.

.ta T 8n
.SH ASCRIPT GRAMMAR EXAMPLE
.EX
.in -8
\fB
#!/bin/ascript
a,	byte,	int,	out
name		A,	int 4,	set	5 d
name		B,	int 4,	set	6 d
name		C,	int 4
target origin	C	A,=
       origin		B,+
target origin	`C=`	C
byte line
\fR
.in

.SH THE FIRST LINE
.EX
Looks like magic!
Must  be   the script interpreter name.

.SH THE SECOND LINE
.EX
Looks like a list.
Those argot will be loaded.

.SH THIRD LINE
.EX
Name? Must be a var name that follows.

.SH SEPARATION ANXIETY?
.EX
The expressions      by comma and line feed are separated.
the argot names  and
the argot parameters by tab                 are separated.

.SH GRAVE
.EX
By grave, also called back tick, the text is enclosed.

.SH VALUES
.EX
By value appended space d a denary value is indicated.

.SH OPERATORS
.EX
The  argot =
the  argot +
must be operators.

.SH VAR NAMES
.EX
Var names are not enclosed.

.SH UNANTICIPATED
.EX
The back   tick text enclosure might not be anticipated.
For space, byte value 32 d,
for tab,   byte value  9 d,
the use    and  values   differ.

.SH NOT SO APPARENT
.EX
By argot name  the target is set.
By argot int 4 the target is used and set.
By argot set   the target is used.

.SH WHERE ARE SYMBOLS SUCH AS [] () {} :
.EX
By single quotes near labels are enclosed.
By double quotes far  labels are enclosed.
Other     symbols,    if     not arithmetic operators, are not used.

.SH CONCLUSION
.EX
Ascript grammar is too easy!

.SH AUTHOR
.EX
In 2016; by Kyle Sallee; ascript was created.

.SH LICENSE
.EX
By \fBman 7 ascript\fR the license is provided.

.SH SEE ALSO
.EX
\fB
man 1 ascript
man 5 ascript
man 5 ascript argot
man 5 ascript enclosure
man 5 ascript operator
man 5 ascript stack
man 5 ascript tutorial 1
man 5 ascript value
man 5 ascript var
man 7 ascript
\fR
