.TH "ascript tutorial 1" 5
.SH NAME
.EX
ascript tutorial 1

.SH COPYRIGHT
.EX
By Kyle Sallee in 2017 copyrighted.

.SH WHAT IS A COMPILER?
.EX
By a compiler source code is read and opcodes are output.

.SH WHAT IS A LINKER?
.EX
By a linker the compiled output with required libraries is linked.

.SH WHAT IS PROGRAM STRIP?
.EX
The linked output  while     usable
the less   than    essential sections
by  the    program strip can be removed.

.SH WHAT IS AN INTERPRETER?
.EX
An interpreter reads script files and executes opcodes.

.SH IS A SCRIPT DATA OR SOFTWARE?
.EX
A script is an   interpreter configuration file.
A script is data that        controls      software.

.SH WHAT IS ARGOT?
.EX
Argot are a language's words.

.SH WHAT IS GRAMMAR?
.EX
Grammar are the rules about argot placement.

.SH WHAT IS PROGRAM SED?
.EX
sed is a stream editor program.
A sed configuration file and regular expression is similar.

.SH WHAT IS REGULAR EXPRESSION?
.EX
300 baud line noise and regular expression look similar.
However, to identify matching text regular expression is useful.

.SH WHAT IS BASH?
.EX
BASH, the bourne again shell, is a script interpreter.

.SH SED AND BASH
.EX
For many BASH scripts to masticate data the program sed is executed.

.SH SED AND ASCRIPT
.EX
The program sed  is fast.
The program ascript with the pcre2 library is faster.
The choice       is preserved.

.SH SED FONDNESS
.EX
Having written many   thousand sed scripts
by the ascript author a        sed fondness was cultivated.

.SH TASK SPECIFIC PROGRAMS
.EX
To   a    task specific program   a task
when delegated better   performance results.
From 1.5 decades of BASH script hacking that much was realized.
However, I was wrong!

.SH TASK SPECIFIC ARGOT
.EX
A task specific    argot   when present
a task specific    program if   executed
slower performance becomes.

.SH ARGOT ARE FASTER THAN PROGRAMS
.EX
The program performance when slower the argot is created.
The program performance when faster the argot is retired.

.SH ARE ARGOT PLUGINS?
.EX
No argot are not plugins!

.SH DOES ASCRIPT HAVE PLUGINS?
.EX
No ascript does not have plugins!

.SH DOES ASCRIPT HAVE BUILTINS?
.EX
No ascript does not have builtins!

.SH IS ASCRIPT FAST?
.EX
No everything else is slow.

.SH WHAT ARE ASCRIPT ARGOT?
.EX
By  argot specific tasks are performed.

.SH WHY ARGOT?
.EX
The argot loads once and can be invoked often.
By  argot less       memory  is  used.
By  argot the   same memory  is shared.
By  argot per   task less       opcodes execute.

.SH A PROGRAM WHY NOT USE?
.EX
Process creation is slow.  Program execution is slow.
Between programs the data transfer is slow.

.SH ARGOT VS PROGRAM
.EX
With a program execution as    compared
an     ascript argot     when  loaded less overhead exists.
All    loaded  argot     share memory.
The    argot   gain      an    unfair advantage.

.SH WHY ARGOT RATHER THAN STAND ALONE PROGRAMS?
.EX
Programs are slow.  Ascript  is  fast.
With scripts the utility programs why not replace?

.SH NOT A DROP IN REPLACEMENT
.EX
For many    sorting  tasks   argot   sort is faster.
For some    sorting  tasks   program sort is required.
For utility programs ascript is      not  a  drop in replacement.
For the     most     useful  tasks   the  argot suffice.

.SH PROGRAM MD5SUM
.EX
By  software project coreutils the program md5sum is provided.
By  program  md5sum  a message digest             is computed.
For years    md5sum  was used.

.SH ARGOT mdk
.EX
By  argot  mdk    a      message digest is computed.
The md5sum digest is not compatible.

.SH THE ARGOT mdk WHY USE?
.EX
The argot mdk is faster.
A fast       digest seemed  useful.
A compatible digest was not required.

.SH WHAT ABOUT MESSAGE DIGEST SECURITY?
.EX
Most message digests         are not secure.
Per  file    digests  can    be             forged.
Many files   when     concatenated
one  file    when     false
a    the     expected digest is  not easily forged.

.SH ASCRIPT DOES NOT REINVENT THE WHEEL?
.EX
The program name, parameters, and output are not being emulated.
For argot to task and performance the importance is accorded.

.SH SYS DURATION
.EX
By  the kernel only many tasks due to security must be delegated.
To  the kernel      a    task                  when    delegated
a   system duration becomes.
By  ascript the sys duration accumulation can not be mitigated!

.SH SYS DURATION MITIGATION
.EX
A   program when not executed the sys duration is avoided.
The syscall mmap the syscall munmap when less often invoked
the sys duration is avoided.
By  ascript some sys duration is avoided.

.SH BETTER METHODS
.EX
For some tasks more than one syscall exist.
The better syscall a magnitude less sys duration becomes.

.SH USER DURATION
.EX
The program ascript or libraries when executing
a   user duration becomes.
Less opcodes when executed less user duration becomes.

.SH REAL DURATION
.EX
By  a    process  100% CPU usage is never attained.
The sys  user     wait durations    when  added
the real duration is   approximated.

.SH PROGRAM GLUE
.EX
A  program glue and ascript differ.
As program glue if  used    the performance tanks.

.SH INIT SCRIPT
.EX
By init scripts a boot time task is performed or a program is launched.
As init scripts ascript scripts are ideal.
With any interpreter as compared by ascript program launch
about half the duration is required.

.SH MULTICORE USE
.EX
For a SMP style init the ascript scripts when invoked
a greater than double performance increase becomes possible.

.SH CONVENIENCE OR PERFORMANCE?
.EX
To performance rather than convenience importance was accorded.
However, the ascript grammar is simple.
While not convenient while not terse ascript is easy.
The ascript scripts can look beautiful.

.SH SCRIPT FILES
.EX
A script file is UTF-8 encoded text.

.SH SCRIPT FILE FIRST LINE
.EX
\&#!/bin/ascript

.SH SCRIPT FILE SECOND LINE
.EX
segfault

.SH PRODUCTION VERSES TEST SCRIPTS
.EX
With solid scripts the argot segfault invocation is not recommended.
With buggy scripts the argot segfault invocation is      recommended.

.SH SCRIPT FILE THIRD LINE
.EX
a

.SH WHY THEN IS ARGOT A NOT BUILTIN?
.EX
For program execution only the argot a invocation is not useful.

.SH BUILTIN ARGOT?
.EX
For  all     scripts no argot is  essential.
Thus ascript starts  stupid   and learns quickly.

.SH TARGET
.EX
By target an operand address is persistently stored.

.SH ORIGIN
.EX
By origin an operand address is persistently stored.

.SH TARGET ORIGIN FULL SCRIPT EXAMPLE
.EX
.ta T 8n
.in -8
\fB
#!/bin/ascript		# script interpreter pathname provide.
segfault		# argot  segfault load.
a,			# argot  a        load.
int,			# argot  int      load.
out,			# argot  out      load.
name	X,		#			target address set.
int 4,			# var   make.		target address used and set.
set	1 d,		# value set.		target address used.
origin	2 d,		# value set.		origin address set.
+,			# value revised.	target address used.
out	`X=`	X,	# X=3
\fR
.in

.SH TARGET ORIGIN DIRECT
.EX
Most often the      target provided address    suffices.
A    second operand when   required
most often  the     origin provided address    suffices.
Neither     when    used   direct   parameters suffice.

.SH ARGOT HOSTING
.EX
In  a      file  for    many argot
the opcode sequences    can  be contained.
The host   argot when   loaded
the hosted argot become available.

.SH ARGOT HOST EXAMPLE
.EX
The argot a      when   loaded
the argot name
the argot origin
the argot target become available.

.SH AUTHOR
.EX
In 2016; by Kyle Sallee; ascript was created.
In 2017; by Kyle Sallee; ascript tutorial 1.5 was created.

.SH LICENSE
.EX
By \fBman 7 ascript\fR the license is provided.

.SH SEE ALSO
.EX
\fB
man 1 ascript
man 5 ascript
man 5 ascript tutorial 2
man 7 ascript
\fR
